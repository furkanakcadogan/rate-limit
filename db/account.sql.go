// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: account.sql

package db

import (
	"context"
)

const createRateLimit = `-- name: CreateRateLimit :one
INSERT INTO ratelimitingdb (
  clientid,
  rate_limit,
  refill_interval
) VALUES (
  $1, $2, $3
)
RETURNING id, clientid, rate_limit, refill_interval
`

type CreateRateLimitParams struct {
	Clientid       string `json:"clientid"`
	RateLimit      int32  `json:"rate_limit"`
	RefillInterval int32  `json:"refill_interval"`
}

func (q *Queries) CreateRateLimit(ctx context.Context, arg CreateRateLimitParams) (Ratelimitingdb, error) {
	row := q.queryRow(ctx, q.createRateLimitStmt, createRateLimit, arg.Clientid, arg.RateLimit, arg.RefillInterval)
	var i Ratelimitingdb
	err := row.Scan(
		&i.ID,
		&i.Clientid,
		&i.RateLimit,
		&i.RefillInterval,
	)
	return i, err
}

const deleteRateLimit = `-- name: DeleteRateLimit :exec
DELETE FROM ratelimitingdb
WHERE id = $1
`

func (q *Queries) DeleteRateLimit(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deleteRateLimitStmt, deleteRateLimit, id)
	return err
}

const getRateLimit = `-- name: GetRateLimit :one
SELECT id, clientid, rate_limit, refill_interval FROM ratelimitingdb
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRateLimit(ctx context.Context, id int32) (Ratelimitingdb, error) {
	row := q.queryRow(ctx, q.getRateLimitStmt, getRateLimit, id)
	var i Ratelimitingdb
	err := row.Scan(
		&i.ID,
		&i.Clientid,
		&i.RateLimit,
		&i.RefillInterval,
	)
	return i, err
}

const listRateLimits = `-- name: ListRateLimits :one
SELECT id, clientid, rate_limit, refill_interval FROM ratelimitingdb
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListRateLimitsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListRateLimits(ctx context.Context, arg ListRateLimitsParams) (Ratelimitingdb, error) {
	row := q.queryRow(ctx, q.listRateLimitsStmt, listRateLimits, arg.Limit, arg.Offset)
	var i Ratelimitingdb
	err := row.Scan(
		&i.ID,
		&i.Clientid,
		&i.RateLimit,
		&i.RefillInterval,
	)
	return i, err
}

const updateRateLimit = `-- name: UpdateRateLimit :exec
UPDATE ratelimitingdb
SET rate_limit = $2, refill_interval = $3
WHERE id = $1
`

type UpdateRateLimitParams struct {
	ID             int32 `json:"id"`
	RateLimit      int32 `json:"rate_limit"`
	RefillInterval int32 `json:"refill_interval"`
}

func (q *Queries) UpdateRateLimit(ctx context.Context, arg UpdateRateLimitParams) error {
	_, err := q.exec(ctx, q.updateRateLimitStmt, updateRateLimit, arg.ID, arg.RateLimit, arg.RefillInterval)
	return err
}
